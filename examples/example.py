#!/usr/bin/env python3
"""
RemoteFlasher使用示例
演示如何使用RemoteFlasher API进行AVR单片机烧录
"""

import time
import sys
import os
from pathlib import Path

# 添加src目录到Python路径
sys.path.insert(0, os.path.join(os.path.dirname(__file__), '..', 'src'))

from remote_flasher import RemoteFlasherClient, flash_hex_file, get_device_info

def example_basic_usage():
    """基础使用示例"""
    print("=== RemoteFlasher基础使用示例 ===")
    
    # 创建客户端
    client = RemoteFlasherClient("http://localhost:5000")
    
    # 1. 检查服务状态
    print("\n1. 检查服务状态...")
    status = client.get_status()
    if status.get('status') == 'running':
        print("✓ 服务运行正常")
        print(f"  GPIO可用: {status.get('gpio_available', False)}")
        print(f"  支持的MCU: {len(status.get('supported_mcus', []))}种")
    else:
        print("✗ 服务不可用")
        return False
    
    # 2. 获取配置信息
    print("\n2. 获取配置信息...")
    config = client.get_config()
    if 'default_mcu' in config:
        print(f"✓ 默认MCU: {config['default_mcu']}")
        print(f"  默认编程器: {config['default_programmer']}")
        print(f"  默认串口: {config['default_port']}")
        print(f"  默认波特率: {config['default_baudrate']}")
    
    # 3. 获取设备信息（需要连接硬件）
    print("\n3. 获取设备信息...")
    device_info = client.get_device_info()
    if device_info.get('success'):
        print("✓ 设备连接正常")
        if device_info.get('device_signature'):
            print(f"  设备签名: {device_info['device_signature']}")
    else:
        print(f"✗ 设备连接失败: {device_info.get('message', '未知错误')}")
        print("  注意: 这可能是因为没有连接AVR设备")
    
    return True

def example_flash_file():
    """文件烧录示例"""
    print("\n=== 文件烧录示例 ===")
    
    # 检查示例hex文件是否存在
    hex_file = "example.hex"
    if not Path(hex_file).exists():
        print(f"创建示例hex文件: {hex_file}")
        create_example_hex_file(hex_file)
    
    # 使用便捷函数烧录
    print(f"\n烧录文件: {hex_file}")
    result = flash_hex_file(
        hex_file,
        mcu="atmega328p",
        programmer="arduino",
        port="/dev/ttyS0",
        baudrate=115200
    )
    
    if result.get('success'):
        print("✓ 烧录成功!")
        print(f"  耗时: {result.get('duration', 0):.2f}秒")
    else:
        print(f"✗ 烧录失败: {result.get('message', '未知错误')}")
        if result.get('error'):
            print(f"  错误详情: {result['error']}")

def example_flash_url():
    """URL烧录示例"""
    print("\n=== URL烧录示例 ===")
    
    client = RemoteFlasherClient("http://localhost:5000")
    
    # 示例URL（实际使用时替换为真实的hex文件URL）
    example_url = "https://raw.githubusercontent.com/example/firmware/main/blink.hex"
    
    print(f"从URL烧录: {example_url}")
    print("注意: 这是示例URL，实际使用时请替换为真实的hex文件URL")
    
    result = client.flash_url(
        example_url,
        mcu="atmega328p",
        programmer="arduino"
    )
    
    if result.get('success'):
        print("✓ URL烧录成功!")
    else:
        print(f"✗ URL烧录失败: {result.get('message', '未知错误')}")

def example_advanced_usage():
    """高级使用示例"""
    print("\n=== 高级使用示例 ===")
    
    client = RemoteFlasherClient("http://localhost:5000")
    
    # 等待服务可用
    print("等待服务可用...")
    if not client.wait_for_service(max_wait=10):
        print("✗ 服务不可用")
        return
    
    print("✓ 服务可用")
    
    # 批量操作示例
    operations = [
        {
            'name': '获取ATmega328P信息',
            'action': lambda: client.get_device_info(mcu='atmega328p', programmer='arduino')
        },
        {
            'name': '获取ATmega168信息', 
            'action': lambda: client.get_device_info(mcu='atmega168', programmer='arduino')
        }
    ]
    
    for op in operations:
        print(f"\n执行: {op['name']}")
        try:
            result = op['action']()
            if result.get('success'):
                print("✓ 成功")
            else:
                print(f"✗ 失败: {result.get('message', '未知错误')}")
        except Exception as e:
            print(f"✗ 异常: {e}")

def create_example_hex_file(filename):
    """创建示例hex文件（简单的LED闪烁程序）"""
    hex_content = """:100000000C9434000C943E000C943E000C943E0082
:100010000C943E000C943E000C943E000C943E0068
:100020000C943E000C943E000C943E000C943E0058
:100030000C943E000C943E000C943E000C943E0048
:100040000C943E000C943E000C943E000C943E0038
:100050000C943E000C943E000C943E000C943E0028
:100060000C943E000C943E000C943E000C943E0018
:100070000C943E000C943E000C943E000C943E0008
:100080000C943E000C943E000C943E000C943E00F8
:100090000C943E000C943E000C943E000C943E00E8
:1000A0000C943E000C943E000C943E000C943E00D8
:1000B0000C943E000C943E000C943E000C943E00C8
:1000C0000C943E000C943E000C943E000C943E00B8
:1000D0000C943E000C943E000C943E000C943E00A8
:1000E0000C943E000C943E000C943E000C943E0098
:1000F0000C943E000C943E000C943E000C943E0088
:10010000000000000000000000000000000000007F
:10011000000000000000000000000000000000006F
:10012000000000000000000000000000000000005F
:10013000000000000000000000000000000000004F
:10014000000000000000000000000000000000003F
:10015000000000000000000000000000000000002F
:10016000000000000000000000000000000000001F
:10017000000000000000000000000000000000000F
:1001800000000000000000000000000000000000FF
:1001900000000000000000000000000000000000EF
:1001A00000000000000000000000000000000000DF
:1001B00000000000000000000000000000000000CF
:1001C00000000000000000000000000000000000BF
:1001D00000000000000000000000000000000000AF
:1001E000000000000000000000000000000000009F
:1001F000000000000000000000000000000000008F
:10020000000000000000000000000000000000007F
:10021000000000000000000000000000000000006F
:10022000000000000000000000000000000000005F
:10023000000000000000000000000000000000004F
:10024000000000000000000000000000000000003F
:10025000000000000000000000000000000000002F
:10026000000000000000000000000000000000001F
:10027000000000000000000000000000000000000F
:1002800000000000000000000000000000000000FF
:1002900000000000000000000000000000000000EF
:1002A00000000000000000000000000000000000DF
:1002B00000000000000000000000000000000000CF
:1002C00000000000000000000000000000000000BF
:1002D00000000000000000000000000000000000AF
:1002E000000000000000000000000000000000009F
:1002F000000000000000000000000000000000008F
:10030000000000000000000000000000000000007F
:10031000000000000000000000000000000000006F
:10032000000000000000000000000000000000005F
:10033000000000000000000000000000000000004F
:10034000000000000000000000000000000000003F
:10035000000000000000000000000000000000002F
:10036000000000000000000000000000000000001F
:10037000000000000000000000000000000000000F
:1003800000000000000000000000000000000000FF
:1003900000000000000000000000000000000000EF
:1003A00000000000000000000000000000000000DF
:1003B00000000000000000000000000000000000CF
:1003C00000000000000000000000000000000000BF
:1003D00000000000000000000000000000000000AF
:1003E000000000000000000000000000000000009F
:1003F000000000000000000000000000000000008F
:10040000000000000000000000000000000000007F
:10041000000000000000000000000000000000006F
:10042000000000000000000000000000000000005F
:10043000000000000000000000000000000000004F
:10044000000000000000000000000000000000003F
:10045000000000000000000000000000000000002F
:10046000000000000000000000000000000000001F
:10047000000000000000000000000000000000000F
:1004800000000000000000000000000000000000FF
:1004900000000000000000000000000000000000EF
:1004A00000000000000000000000000000000000DF
:1004B00000000000000000000000000000000000CF
:1004C00000000000000000000000000000000000BF
:1004D00000000000000000000000000000000000AF
:1004E000000000000000000000000000000000009F
:1004F000000000000000000000000000000000008F
:10050000000000000000000000000000000000007F
:10051000000000000000000000000000000000006F
:10052000000000000000000000000000000000005F
:10053000000000000000000000000000000000004F
:10054000000000000000000000000000000000003F
:10055000000000000000000000000000000000002F
:10056000000000000000000000000000000000001F
:10057000000000000000000000000000000000000F
:1005800000000000000000000000000000000000FF
:1005900000000000000000000000000000000000EF
:1005A00000000000000000000000000000000000DF
:1005B00000000000000000000000000000000000CF
:1005C00000000000000000000000000000000000BF
:1005D00000000000000000000000000000000000AF
:1005E000000000000000000000000000000000009F
:1005F000000000000000000000000000000000008F
:10060000000000000000000000000000000000007F
:10061000000000000000000000000000000000006F
:10062000000000000000000000000000000000005F
:10063000000000000000000000000000000000004F
:10064000000000000000000000000000000000003F
:10065000000000000000000000000000000000002F
:10066000000000000000000000000000000000001F
:10067000000000000000000000000000000000000F
:1006800011241FBECFEFD8E0DEBFCDBF21E0A0E0B1E001C01D92A930B207E1F70E9440000C9400
:10068000000000000000000000000000000000008F
:00000001FF"""
    
    with open(filename, 'w') as f:
        f.write(hex_content)
    
    print(f"✓ 创建示例hex文件: {filename}")

def main():
    """主函数"""
    print("RemoteFlasher API 使用示例")
    print("=" * 50)
    
    try:
        # 基础使用示例
        if not example_basic_usage():
            print("\n请确保API服务器正在运行:")
            print("python api_server.py")
            return
        
        # 文件烧录示例
        example_flash_file()
        
        # URL烧录示例（注释掉，因为需要真实URL）
        # example_flash_url()
        
        # 高级使用示例
        example_advanced_usage()
        
        print("\n" + "=" * 50)
        print("示例运行完成!")
        print("\n注意事项:")
        print("1. 实际烧录需要连接AVR设备")
        print("2. 确认串口设备路径正确")
        print("3. 检查硬件连接和权限设置")
        
    except KeyboardInterrupt:
        print("\n用户中断")
    except Exception as e:
        print(f"\n运行错误: {e}")

if __name__ == '__main__':
    main()
